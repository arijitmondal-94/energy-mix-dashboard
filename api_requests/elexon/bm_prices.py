from datetime import datetime
from logging import getLogger
from typing import Optional, List

import requests

from api_requests.elexon.balancing_mechanism import Elexon
from api_requests.elexon.dto import IndicativeImbalanceSettlement
from utils.datetime_helper import time_to_isp

logger = getLogger(__name__)


class BalancingPrice(Elexon):

    def __init__(self) -> None:
        super().__init__()
        self.endpoint = f"{self.base_url}/balancing/settlement/system-prices"

    def __get_request(self, url: Optional[str] = None, payload: Optional[dict] = None) -> dict:
        r = requests.get(url or self.endpoint,
                         params=payload, headers=self.headers)
        if r.status_code == 200:
            return r.json()['data']
        else:
            raise ValueError(
                f"Resrponse Code: {r.status_code}. Could not retrieve data for url {url}.")

    def settelement_prices_day_period(self, settlement_datetime: datetime) -> dict:
        """
        Returns settlement system buy and sell prices generated by the SAA for a given settlement period, relating to
        the data for a settlement run. Only messages generated for the latest settlement run are returned.

        Settlement date parameter must be provided in the exact format yyyy-MM-dd.

        Args:
            settlement_datetime (datetime): _description_

        Returns:
            dict: _description_
        """
        isp = time_to_isp(settlement_datetime.time())
        url = f"{self.endpoint}/{settlement_datetime.strftime('%Y-%m-%d')}/{isp}"
        try:
            data = self.__get_request(url)
            return IndicativeImbalanceSettlement.model_validate(data[0])

        except ValueError as e:
            logger.error(f"{e}")

    def settelement_prices_day(self, settlement_datetime: datetime) -> List[IndicativeImbalanceSettlement]:
        """
        Returns settlement system buy and sell prices generated by the SAA for a given settlement period, relating to
        the data for a settlement run. Only messages generated for the latest settlement run are returned.

        Settlement date parameter must be provided in the exact format yyyy-MM-dd.

        Args:
            settlement_datetime (datetime): _description_

        Returns:
            dict: _description_
        """
        url = f"{self.endpoint}/{settlement_datetime.strftime('%Y-%m-%d')}"
        try:
            data = self.__get_request(url)
            return [IndicativeImbalanceSettlement.model_validate(d) for d in data]

        except ValueError as e:
            logger.error(f"{e}")
